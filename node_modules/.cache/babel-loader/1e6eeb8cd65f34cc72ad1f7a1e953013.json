{"ast":null,"code":"import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport { client } from \"../../api/client\";\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.data;\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            date: new Date().toISOString(),\n            title,\n            content,\n            user: userId,\n            reactions: {\n              thumbsUp: 0,\n              hooray: 0,\n              heart: 0,\n              rocket: 0,\n              eyes: 0\n            }\n          }\n        };\n      }\n    },\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.posts.find(post => post.id === id);\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.posts = state.posts.concat(action.payload);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllPosts = state => state.postsSlice;\nexport const selectPostById = (state, postId) => state.posts.find(post => post.id === postId);","map":{"version":3,"names":["createAsyncThunk","createSlice","nanoid","sub","client","initialState","posts","status","error","fetchPosts","response","get","data","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","find","post","id","reactions","postAdded","reducer","push","prepare","title","content","userId","date","Date","toISOString","user","thumbsUp","hooray","heart","rocket","eyes","postUpdated","extraReducers","builder","addCase","pending","fulfilled","concat","rejected","message","actions","selectAllPosts","selectPostById"],"sources":["/home/saif/Documents/Proxym/redux-essentials-example-app/src/features/posts/postsSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nimport { client } from \"../../api/client\";\n\nconst initialState = {\n    posts: [],\n    status: 'idle',\n    error: null\n}\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n    const response = await client.get('/fakeApi/posts')\n    return response.data\n})\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        reactionAdded(state, action) {\n            const {postId , reaction } = action.payload\n            const existingPost = state.posts.find( post => post.id === postId)\n            if(existingPost) {\n                existingPost.reactions[reaction]++\n            }\n        },\n        postAdded: {\n            reducer(state , action){\n                state.posts.push(action.payload)\n            },\n            prepare(title , content, userId) {\n                return {\n                    payload: {\n                        id: nanoid(),\n                        date: new Date().toISOString(),\n                        title,\n                        content,\n                        user: userId,\n                        reactions: {\n                            thumbsUp: 0,\n                            hooray: 0,\n                            heart: 0,\n                            rocket: 0,\n                            eyes: 0,\n                          },\n                    }\n                }\n            }\n        },\n        postUpdated(state,action) {\n            const {id , title , content } = action.payload\n            const existingPost = state.posts.find(post => post.id === id)\n            if(existingPost){\n                existingPost.title = title\n                existingPost.content = content\n            }\n        }\n\n    },\n    extraReducers(builder) {\n        builder.addCase(fetchPosts.pending,(state,action) => {\n            state.status = 'loading'\n        })\n        .addCase(fetchPosts.fulfilled,(state,action) => {\n            state.status = 'succeeded'\n            state.posts = state.posts.concat(action.payload)\n        })\n        .addCase(fetchPosts.rejected,(state,action) => {\n            state.status = 'failed'\n            state.error = action.error.message\n        })\n    }\n})\n\nexport const { postAdded, postUpdated ,reactionAdded } = postsSlice.actions\nexport default postsSlice.reducer\n\nexport const selectAllPosts = state => state.postsSlice\n\nexport const selectPostById = ( state,postId ) => state.posts.find(post => post.id === postId)"],"mappings":"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"},"metadata":{},"sourceType":"module"}