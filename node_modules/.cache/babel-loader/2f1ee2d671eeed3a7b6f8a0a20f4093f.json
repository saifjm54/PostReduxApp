{"ast":null,"code":"import { createSlice, createAsyncThunk, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\nconst initialState = postsAdapter.getInitialState({\n  status: 'idle',\n  error: null\n});\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts');\n  return response.data;\n});\nexport const addNewPost = createAsyncThunk('posts/addNewPost', async initialPost => {\n  const response = await client.post('/fakeApi/posts', initialPost);\n  return response.data;\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.entities[postId];\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n    postUpdated(state, action) {\n      const {\n        id,\n        title,\n        content\n      } = action.payload;\n      const existingPost = state.entities[id];\n      if (existingPost) {\n        existingPost.title = title;\n        existingPost.content = content;\n      }\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchPosts.pending, (state, action) => {\n      state.status = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Add any fetched posts to the array\n      postsAdapter.upsertMany(state, action.payload);\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewPost.fulfilled, postsAdapter.addOne);\n  }\n});\nexport const {\n  postAdded,\n  postUpdated,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;\nexport const selectAllPosts = state => state.posts.posts;\nexport const selectPostById = (state, postId) => state.posts.posts.find(post => post.id === postId);\nexport const selectPostsByUser = createSelector([selectAllPosts, (state, userId) => userId], (posts, userId) => posts.filter(post = post.user === userId));","map":{"version":3,"names":["createSlice","createAsyncThunk","createSelector","createEntityAdapter","client","postsAdapter","sortComparer","a","b","date","localeCompare","initialState","getInitialState","status","error","fetchPosts","response","get","data","addNewPost","initialPost","post","postsSlice","name","reducers","reactionAdded","state","action","postId","reaction","payload","existingPost","entities","reactions","postUpdated","id","title","content","extraReducers","builder","addCase","pending","fulfilled","upsertMany","rejected","message","addOne","postAdded","actions","reducer","selectAllPosts","posts","selectPostById","find","selectPostsByUser","userId","filter","user"],"sources":["/home/saif/Documents/Proxym/redux-essentials-example-app/src/features/posts/postsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk, createSelector, createEntityAdapter } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a,b) => b.date.localeCompare(a.date)\n})\n\nconst initialState = postsAdapter.getInitialState({\n  status: 'idle',\n  error: null,\n})\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.data\n})\n\nexport const addNewPost = createAsyncThunk(\n  'posts/addNewPost',\n  async (initialPost) => {\n    const response = await client.post('/fakeApi/posts', initialPost)\n    return response.data\n  }\n)\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.entities[postId]\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.entities[id]\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        // Add any fetched posts to the array\n        postsAdapter.upsertMany(state,action.payload)\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n      })\n      .addCase(addNewPost.fulfilled,postsAdapter.addOne)\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n\nexport const selectAllPosts = (state) => state.posts.posts\n\nexport const selectPostById = (state, postId) =>\n  state.posts.posts.find((post) => post.id === postId)\n\nexport const selectPostsByUser = createSelector(\n  [selectAllPosts, (state,userId) => userId ],\n  (posts, userId) =>posts.filter(post = post.user === userId)\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}