{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nexport const fetchNotifications = createAsyncThunk('notifications/fetchNotifications', async (_, _ref) => {\n  let {\n    getState\n  } = _ref;\n  const allNotifications = selectAllNotifications(getState());\n  const [latestNotification] = allNotifications;\n  const latestTimestamp = latestNotification ? latestNotification.date : '';\n  const response = await client.get(`/fakeApi/notifications?since=${latestTimestamp}`);\n  return response.data;\n});\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: [],\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      state.push(...action.payload);\n      // Sort with newest first\n      state.sort((a, b) => b.date.localeCompare(a.date));\n    });\n  }\n});\nexport default notificationsSlice.reducer;\nexport const selectAllNotifications = state => state.notifications;","map":{"version":3,"names":["createSlice","createAsyncThunk","client","fetchNotifications","_","_ref","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","date","response","get","data","notificationsSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","push","payload","sort","a","b","localeCompare","reducer","notifications"],"sources":["/home/saif/Documents/Proxym/redux-essentials-example-app/src/features/notifications/notificationsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\nimport { client } from '../../api/client'\n\nexport const fetchNotifications = createAsyncThunk(\n  'notifications/fetchNotifications',\n  async (_, { getState }) => {\n    const allNotifications = selectAllNotifications(getState())\n    const [latestNotification] = allNotifications\n    const latestTimestamp = latestNotification ? latestNotification.date : ''\n    const response = await client.get(\n      `/fakeApi/notifications?since=${latestTimestamp}`\n    )\n    return response.data\n  }\n)\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: [],\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      state.push(...action.payload)\n      // Sort with newest first\n      state.sort((a, b) => b.date.localeCompare(a.date))\n    })\n  }\n})\n\nexport default notificationsSlice.reducer\n\nexport const selectAllNotifications = state => state.notifications"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,SAASC,MAAM,QAAQ,kBAAkB;AAEzC,OAAO,MAAMC,kBAAkB,GAAGF,gBAAgB,CAChD,kCAAkC,EAClC,OAAOG,CAAC,EAAAC,IAAA,KAAmB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EACpB,MAAME,gBAAgB,GAAGC,sBAAsB,CAACF,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACG,kBAAkB,CAAC,GAAGF,gBAAgB;EAC7C,MAAMG,eAAe,GAAGD,kBAAkB,GAAGA,kBAAkB,CAACE,IAAI,GAAG,EAAE;EACzE,MAAMC,QAAQ,GAAG,MAAMV,MAAM,CAACW,GAAG,CAC9B,gCAA+BH,eAAgB,EAClD,CAAC;EACD,OAAOE,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,MAAMC,kBAAkB,GAAGf,WAAW,CAAC;EACrCgB,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAaA,CAACC,OAAO,EAAE;IACrBA,OAAO,CAACC,OAAO,CAAClB,kBAAkB,CAACmB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/DD,KAAK,CAACE,IAAI,CAAC,GAAGD,MAAM,CAACE,OAAO,CAAC;MAC7B;MACAH,KAAK,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAClB,IAAI,CAACmB,aAAa,CAACF,CAAC,CAACjB,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeI,kBAAkB,CAACgB,OAAO;AAEzC,OAAO,MAAMvB,sBAAsB,GAAGe,KAAK,IAAIA,KAAK,CAACS,aAAa"},"metadata":{},"sourceType":"module"}