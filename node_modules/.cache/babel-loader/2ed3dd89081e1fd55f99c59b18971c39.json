{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nexports.__esModule = true;\nexports.compileQuery = void 0;\nvar debug_1 = require(\"debug\");\nvar outvariant_1 = require(\"outvariant\");\nvar getComparatorsForValue_1 = require(\"./getComparatorsForValue\");\nvar isObject_1 = require(\"../utils/isObject\");\nvar log = debug_1.debug('compileQuery');\n/**\n * Compile a query expression into a function that accepts an actual entity\n * and returns a query execution result (whether the entity satisfies the query).\n */\nfunction compileQuery(query) {\n  log('%j', query);\n  return function (data) {\n    return Object.entries(query.where).map(function (_a) {\n      var _b = __read(_a, 2),\n        property = _b[0],\n        queryChunk = _b[1];\n      var actualValue = data[property];\n      log('executing query chunk on \"%s\":\\n\\n%j\\n\\non data:\\n\\n%j\\n', property, queryChunk, data);\n      log('actual value for \"%s\":', property, actualValue);\n      if (!queryChunk) {\n        return true;\n      }\n      // If an entity doesn't have any value for the property\n      // is being queried for, treat it as non-matching.\n      if (actualValue == null) {\n        return false;\n      }\n      return Object.entries(queryChunk).reduce(function (acc, _a) {\n        var _b = __read(_a, 2),\n          comparatorName = _b[0],\n          expectedValue = _b[1];\n        if (!acc) {\n          return acc;\n        }\n        if (Array.isArray(actualValue)) {\n          log('actual value is array, checking if at least one item matches...', {\n            comparatorName: comparatorName,\n            expectedValue: expectedValue\n          });\n          /**\n           * @fixme Can assume `some`? Why not `every`?\n           */\n          return actualValue.some(function (value) {\n            return compileQuery({\n              where: queryChunk\n            })(value);\n          });\n        }\n        // When the actual value is a resolved relational property reference,\n        // execute the current query chunk on the referenced entity.\n        if (actualValue.__type || isObject_1.isObject(actualValue)) {\n          return compileQuery({\n            where: queryChunk\n          })(actualValue);\n        }\n        var comparatorSet = getComparatorsForValue_1.getComparatorsForValue(actualValue);\n        log('comparators', comparatorSet);\n        var comparatorFn = comparatorSet[comparatorName];\n        log('using comparator function for \"%s\":', comparatorName, comparatorFn);\n        outvariant_1.invariant(comparatorFn, 'Failed to compile the query \"%j\": no comparator found for the chunk \"%s\". Please check the validity of the query.', query, comparatorName);\n        return comparatorFn(expectedValue, actualValue);\n      }, true);\n    }).every(Boolean);\n  };\n}\nexports.compileQuery = compileQuery;","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","exports","__esModule","compileQuery","debug_1","require","outvariant_1","getComparatorsForValue_1","isObject_1","log","debug","query","data","Object","entries","where","map","_a","_b","property","queryChunk","actualValue","reduce","acc","comparatorName","expectedValue","Array","isArray","some","__type","isObject","comparatorSet","getComparatorsForValue","comparatorFn","invariant","every","Boolean"],"sources":["/home/saif/Documents/Proxym/redux-essentials-example-app/node_modules/@mswjs/data/lib/query/compileQuery.js"],"sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nexports.__esModule = true;\nexports.compileQuery = void 0;\nvar debug_1 = require(\"debug\");\nvar outvariant_1 = require(\"outvariant\");\nvar getComparatorsForValue_1 = require(\"./getComparatorsForValue\");\nvar isObject_1 = require(\"../utils/isObject\");\nvar log = debug_1.debug('compileQuery');\n/**\n * Compile a query expression into a function that accepts an actual entity\n * and returns a query execution result (whether the entity satisfies the query).\n */\nfunction compileQuery(query) {\n    log('%j', query);\n    return function (data) {\n        return Object.entries(query.where)\n            .map(function (_a) {\n            var _b = __read(_a, 2), property = _b[0], queryChunk = _b[1];\n            var actualValue = data[property];\n            log('executing query chunk on \"%s\":\\n\\n%j\\n\\non data:\\n\\n%j\\n', property, queryChunk, data);\n            log('actual value for \"%s\":', property, actualValue);\n            if (!queryChunk) {\n                return true;\n            }\n            // If an entity doesn't have any value for the property\n            // is being queried for, treat it as non-matching.\n            if (actualValue == null) {\n                return false;\n            }\n            return Object.entries(queryChunk).reduce(function (acc, _a) {\n                var _b = __read(_a, 2), comparatorName = _b[0], expectedValue = _b[1];\n                if (!acc) {\n                    return acc;\n                }\n                if (Array.isArray(actualValue)) {\n                    log('actual value is array, checking if at least one item matches...', {\n                        comparatorName: comparatorName,\n                        expectedValue: expectedValue\n                    });\n                    /**\n                     * @fixme Can assume `some`? Why not `every`?\n                     */\n                    return actualValue.some(function (value) {\n                        return compileQuery({ where: queryChunk })(value);\n                    });\n                }\n                // When the actual value is a resolved relational property reference,\n                // execute the current query chunk on the referenced entity.\n                if (actualValue.__type || isObject_1.isObject(actualValue)) {\n                    return compileQuery({ where: queryChunk })(actualValue);\n                }\n                var comparatorSet = getComparatorsForValue_1.getComparatorsForValue(actualValue);\n                log('comparators', comparatorSet);\n                var comparatorFn = comparatorSet[comparatorName];\n                log('using comparator function for \"%s\":', comparatorName, comparatorFn);\n                outvariant_1.invariant(comparatorFn, 'Failed to compile the query \"%j\": no comparator found for the chunk \"%s\". Please check the validity of the query.', query, comparatorName);\n                return comparatorFn(expectedValue, actualValue);\n            }, true);\n        })\n            .every(Boolean);\n    };\n}\nexports.compileQuery = compileQuery;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}