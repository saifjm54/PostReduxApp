{"ast":null,"code":"import { rest, setupWorker } from 'msw';\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data';\nimport { nanoid } from '@reduxjs/toolkit';\nimport faker from 'faker';\nimport seedrandom from 'seedrandom';\nimport { Server as MockSocketServer } from 'mock-socket';\nimport { setRandom } from 'txtgen';\nimport { parseISO } from 'date-fns';\nconst NUM_USERS = 3;\nconst POSTS_PER_USER = 3;\nconst RECENT_NOTIFICATIONS_DAYS = 7;\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 0;\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true;\nlet rng = seedrandom();\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed');\n  let seedDate;\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem('randomTimestampSeed', randomSeedString);\n  }\n  rng = seedrandom(randomSeedString);\n  setRandom(rng);\n  faker.seed(seedDate.getTime());\n}\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\nconst randomFromArray = array => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post')\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user')\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post')\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post')\n  }\n});\nconst createUserData = () => {\n  const firstName = faker.name.firstName();\n  const lastName = faker.name.lastName();\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName()\n  };\n};\nconst createPostData = user => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create()\n  };\n};\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData());\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author);\n    db.post.create(newPost);\n  }\n}\nconst serializePost = post => ({\n  ...post,\n  user: post.user.id\n});\n\n/* MSW REST API Handlers */\n\nexport const handlers = [rest.get('/fakeApi/posts', function (req, res, ctx) {\n  const posts = db.post.getAll().map(serializePost);\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts));\n}), rest.post('/fakeApi/posts', function (req, res, ctx) {\n  const data = req.body;\n  if (data.content === 'error') {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.status(500), ctx.json('Server error saving this post!'));\n  }\n  data.date = new Date().toISOString();\n  const user = db.user.findFirst({\n    where: {\n      id: {\n        equals: data.user\n      }\n    }\n  });\n  data.user = user;\n  data.reactions = db.reaction.create();\n  const post = db.post.create(data);\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n}), rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n  const post = db.post.findFirst({\n    where: {\n      id: {\n        equals: req.params.postId\n      }\n    }\n  });\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n}), rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n  const {\n    id,\n    ...data\n  } = req.body;\n  const updatedPost = db.post.update({\n    where: {\n      id: {\n        equals: req.params.postId\n      }\n    },\n    data\n  });\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(updatedPost)));\n}), rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n  const post = db.post.findFirst({\n    where: {\n      id: {\n        equals: req.params.postId\n      }\n    }\n  });\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json({\n    comments: post.comments\n  }));\n}), rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n  const postId = req.params.postId;\n  const reaction = req.body.reaction;\n  const post = db.post.findFirst({\n    where: {\n      id: {\n        equals: postId\n      }\n    }\n  });\n  const updatedPost = db.post.update({\n    where: {\n      id: {\n        equals: postId\n      }\n    },\n    data: {\n      reactions: {\n        ...post.reactions,\n        [reaction]: post.reactions[reaction] += 1\n      }\n    }\n  });\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(updatedPost)));\n}), rest.get('/fakeApi/notifications', (req, res, ctx) => {\n  const numNotifications = getRandomInt(1, 5);\n  let notifications = generateRandomNotifications(undefined, numNotifications, db);\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications));\n}), rest.get('/fakeApi/users', (req, res, ctx) => {\n  return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()));\n})];\nexport const worker = setupWorker(...handlers);\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost');\nlet currentSocket;\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj));\n};\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5);\n  const notifications = generateRandomNotifications(since, numNotifications, db);\n  sendMessage(socket, {\n    type: 'notifications',\n    payload: notifications\n  });\n};\nexport const forceGenerateNotifications = since => {\n  sendRandomNotifications(currentSocket, since);\n};\nsocketServer.on('connection', socket => {\n  currentSocket = socket;\n  socket.on('message', data => {\n    const message = JSON.parse(data);\n    switch (message.type) {\n      case 'notifications':\n        {\n          const since = message.payload;\n          sendRandomNotifications(socket, since);\n          break;\n        }\n      default:\n        break;\n    }\n  });\n});\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = ['poked you', 'says hi!', `is glad we're friends`, 'sent you a gift'];\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date();\n  let pastDate;\n  if (since) {\n    pastDate = parseISO(since);\n  } else {\n    pastDate = new Date(now.valueOf());\n    pastDate.setMinutes(pastDate.getMinutes() - 15);\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll());\n    const template = randomFromArray(notificationTemplates);\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id\n    };\n  });\n  return notifications;\n}","map":{"version":3,"names":["rest","setupWorker","factory","oneOf","manyOf","primaryKey","nanoid","faker","seedrandom","Server","MockSocketServer","setRandom","parseISO","NUM_USERS","POSTS_PER_USER","RECENT_NOTIFICATIONS_DAYS","ARTIFICIAL_DELAY_MS","useSeededRNG","rng","randomSeedString","localStorage","getItem","seedDate","Date","toISOString","setItem","seed","getTime","getRandomInt","min","max","Math","ceil","floor","randomFromArray","array","index","length","db","user","id","firstName","String","lastName","name","username","posts","post","title","date","content","reactions","comments","comment","text","reaction","thumbsUp","Number","hooray","heart","rocket","eyes","createUserData","internet","userName","createPostData","lorem","words","recent","paragraphs","create","i","author","j","newPost","serializePost","handlers","get","req","res","ctx","getAll","map","delay","json","data","body","status","findFirst","where","equals","params","postId","patch","updatedPost","update","numNotifications","notifications","generateRandomNotifications","undefined","worker","socketServer","currentSocket","sendMessage","socket","obj","send","JSON","stringify","sendRandomNotifications","since","type","payload","forceGenerateNotifications","on","message","parse","notificationTemplates","now","pastDate","valueOf","setMinutes","getMinutes","Array","template","between"],"sources":["/home/saif/Documents/Proxym/redux-essentials-example-app/src/api/server.js"],"sourcesContent":["import { rest, setupWorker } from 'msw'\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\nimport { nanoid } from '@reduxjs/toolkit'\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\nimport { Server as MockSocketServer } from 'mock-socket'\nimport { setRandom } from 'txtgen'\n\nimport { parseISO } from 'date-fns'\n\nconst NUM_USERS = 3\nconst POSTS_PER_USER = 3\nconst RECENT_NOTIFICATIONS_DAYS = 7\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 0\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n})\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName()\n  const lastName = faker.name.lastName()\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  }\n}\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  }\n}\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData())\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author)\n    db.post.create(newPost)\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n})\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      )\n    }\n\n    data.date = new Date().toISOString()\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\n    data.user = user\n    data.reactions = db.reaction.create()\n\n    const post = db.post.create(data)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    )\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId\n    const reaction = req.body.reaction\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    })\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    })\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5)\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    )\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\n  }),\n]\n\nexport const worker = setupWorker(...handlers)\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost')\n\nlet currentSocket\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj))\n}\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5)\n\n  const notifications = generateRandomNotifications(since, numNotifications, db)\n\n  sendMessage(socket, { type: 'notifications', payload: notifications })\n}\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since)\n}\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data)\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload\n        sendRandomNotifications(socket, since)\n        break\n      }\n      default:\n        break\n    }\n  })\n})\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date()\n  let pastDate\n\n  if (since) {\n    pastDate = parseISO(since)\n  } else {\n    pastDate = new Date(now.valueOf())\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll())\n    const template = randomFromArray(notificationTemplates)\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    }\n  })\n\n  return notifications\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}