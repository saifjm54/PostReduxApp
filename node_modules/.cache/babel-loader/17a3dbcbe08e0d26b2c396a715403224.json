{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { client } from \"../../api/client\";\nexport const fetchNotifications = createAsyncThunk('notifications/fetchNotifications', async (_, _ref) => {\n  let {\n    getState\n  } = _ref;\n  const allNotifications = selectAllNotifications(getState());\n  const [latestNotification] = allNotifications;\n  const latestTimestamp = latestNotification ? latestNotification.date : '';\n  const response = await client.get(`/fakeApi/notifications?since=${latestTimestamp}`);\n  return response.data;\n});\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: [],\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      state.push(...action.payload);\n      state.sort((a, b) => b.date.localCompare(a.date));\n    });\n  }\n});\nexport default notificationsSlice.reducer;\nexport const selectAllNotifications = state => state.notifications;","map":{"version":3,"names":["createAsyncThunk","createSlice","client","fetchNotifications","_","_ref","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","date","response","get","data","notificationsSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","push","payload","sort","a","b","localCompare","reducer","notifications"],"sources":["/home/saif/Documents/Proxym/redux-essentials-example-app/src/features/notifications/notificationsSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { client } from \"../../api/client\";\n\nexport const fetchNotifications = createAsyncThunk(\n    'notifications/fetchNotifications',\n    async(_, {getState }) => {\n        const allNotifications = selectAllNotifications(getState())\n        const [latestNotification] = allNotifications\n        const latestTimestamp = latestNotification ? latestNotification.date : ''\n        const response = await client.get(\n      `/fakeApi/notifications?since=${latestTimestamp}`\n        )\n        return response.data\n    }\n)\nconst notificationsSlice = createSlice({\n    name : 'notifications',\n    initialState: [],\n    reducers: {},\n    extraReducers(builder) {\n        builder.addCase(fetchNotifications.fulfilled, (state,action) => {\n            state.push(...action.payload)\n            state.sort((a,b) => b.date.localCompare(a.date))\n        })\n    }\n})\nexport default notificationsSlice.reducer\n\nexport const selectAllNotifications = state => state.notifications"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,MAAM,QAAQ,kBAAkB;AAEzC,OAAO,MAAMC,kBAAkB,GAAGH,gBAAgB,CAC9C,kCAAkC,EAClC,OAAMI,CAAC,EAAAC,IAAA,KAAkB;EAAA,IAAhB;IAACC;EAAS,CAAC,GAAAD,IAAA;EAChB,MAAME,gBAAgB,GAAGC,sBAAsB,CAACF,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACG,kBAAkB,CAAC,GAAGF,gBAAgB;EAC7C,MAAMG,eAAe,GAAGD,kBAAkB,GAAGA,kBAAkB,CAACE,IAAI,GAAG,EAAE;EACzE,MAAMC,QAAQ,GAAG,MAAMV,MAAM,CAACW,GAAG,CAClC,gCAA+BH,eAAgB,EAC9C,CAAC;EACD,OAAOE,QAAQ,CAACE,IAAI;AACxB,CACJ,CAAC;AACD,MAAMC,kBAAkB,GAAGd,WAAW,CAAC;EACnCe,IAAI,EAAG,eAAe;EACtBC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAaA,CAACC,OAAO,EAAE;IACnBA,OAAO,CAACC,OAAO,CAAClB,kBAAkB,CAACmB,SAAS,EAAE,CAACC,KAAK,EAACC,MAAM,KAAK;MAC5DD,KAAK,CAACE,IAAI,CAAC,GAAGD,MAAM,CAACE,OAAO,CAAC;MAC7BH,KAAK,CAACI,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAKA,CAAC,CAAClB,IAAI,CAACmB,YAAY,CAACF,CAAC,CAACjB,IAAI,CAAC,CAAC;IACpD,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AACF,eAAeI,kBAAkB,CAACgB,OAAO;AAEzC,OAAO,MAAMvB,sBAAsB,GAAGe,KAAK,IAAIA,KAAK,CAACS,aAAa"},"metadata":{},"sourceType":"module"}